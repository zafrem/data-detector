namespace: comm
description: High-entropy token and secret patterns (API keys, tokens, secrets)

patterns:
  - id: generic_token_01
    location: comm
    category: token
    description: Generic high-entropy token (20+ chars, base64url/hex, high entropy)
    pattern: '[A-Za-z0-9_\-+/=.]{20,}'
    verification: high_entropy_token
    priority: 90
    mask: "[REDACTED_TOKEN]"
    examples:
      match:
        - "abc123XYZ456def789GHI012jkl345MNO678pqr901STU234vwx567ABC890"
        - "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ"
        - "example_token_ABCDEFGH1234567890IJKLMNOP1234567890QRSTUVWXYZ1234567890"
        - "TEST1234567890ABCDEFGHIJKLMNOP1234567890QRSTUVWXYZ1234567890ABC"
      nomatch:
        - "short_token_here"
        - "has spaces in it so invalid"
        - "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"  # Low entropy (repetitive)
        - "simple-password-123"
    policy:
      store_raw: false
      action_on_match: redact
      severity: critical
    metadata:
      note: "Detects generic high-entropy tokens (20+ chars) using Shannon entropy calculation"

  - id: aws_access_key_01
    location: comm
    category: token
    description: AWS Access Key ID (starts with AKIA, 20 chars)
    pattern: 'AKIA[0-9A-Z]{16}'
    priority: 10
    mask: "AKIA****************"
    examples:
      match:
        - "AKIAIOSFODNN7EXAMPLE"
        - "AKIAJG6N5D2K4EXAMPLE"
      nomatch:
        - "AKIA123"
        - "akiaiosfodnn7example"  # lowercase
    policy:
      store_raw: false
      action_on_match: redact
      severity: critical
    metadata:
      provider: "AWS"
      type: "Access Key ID"

  - id: aws_secret_key_01
    location: comm
    category: token
    description: AWS Secret Access Key (40 chars, base64)
    pattern: '[A-Za-z0-9/+=]{40}'
    verification: high_entropy_token
    priority: 15
    mask: "[REDACTED_AWS_SECRET]"
    examples:
      match:
        - "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
        - "je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY"
      nomatch:
        - "short_key"
        - "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"  # Low entropy
    policy:
      store_raw: false
      action_on_match: redact
      severity: critical
    metadata:
      provider: "AWS"
      type: "Secret Access Key"

  - id: github_token_01
    location: comm
    category: token
    description: GitHub Personal Access Token (starts with ghp_, gho_, ghu_, ghs_, or ghr_)
    pattern: 'gh[pousr]_[A-Za-z0-9_]{36,}'
    verification: high_entropy_token
    priority: 10
    mask: "ghp_************************************"
    examples:
      match:
        - "ghp_1a2B3c4D5e6F7g8H9i0J1k2L3m4N5o6P7q8R9s0T1u2V3w4X5y6Z"
        - "gho_16C7e42F292c6912E7710c838347Ae178B4a"
        - "ghu_16C7e42F292c6912E7710c838347Ae178B4a"
      nomatch:
        - "ghp_short"
        - "github_token_123"
    policy:
      store_raw: false
      action_on_match: redact
      severity: critical
    metadata:
      provider: "GitHub"
      type: "Personal Access Token"

  - id: stripe_key_01
    location: comm
    category: token
    description: Stripe-like API Key (example pattern - use rk_test_ for testing)
    pattern: 'rk_(live|test)_[A-Za-z0-9]{24,}'
    verification: high_entropy_token
    priority: 10
    mask: "rk_****_************************"
    examples:
      match:
        - "rk_test_EXAMPLEKEY1234567890abcdefgh12345"
        - "rk_test_TESTKEY9876543210zyxwvuts98765"
      nomatch:
        - "rk_test_short"
        - "rk_prod_notvalid"
    policy:
      store_raw: false
      action_on_match: redact
      severity: critical
    metadata:
      provider: "Example (Stripe-like pattern)"
      type: "API Key"
      note: "Example pattern using rk_ prefix. These are FAKE examples for testing only."

  - id: jwt_token_01
    location: comm
    category: token
    description: JSON Web Token (JWT) - three base64url parts separated by dots
    pattern: 'eyJ[A-Za-z0-9_\-]+\.eyJ[A-Za-z0-9_\-]+\.[A-Za-z0-9_\-]+'
    priority: 20
    mask: "[REDACTED_JWT]"
    examples:
      match:
        - "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        - "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJleGFtcGxlLmNvbSIsInN1YiI6InVzZXIxMjMifQ.abcdef123456"
      nomatch:
        - "eyJ.incomplete.token"
        - "notavalidjwttoken"
    policy:
      store_raw: false
      action_on_match: redact
      severity: high
    metadata:
      type: "JSON Web Token (JWT)"

  - id: slack_token_01
    location: comm
    category: token
    description: Slack Token (starts with xoxb-, xoxp-, xoxa-, or xoxr-)
    pattern: 'xox[bpar]-[A-Za-z0-9\-]{10,}'
    verification: high_entropy_token
    priority: 10
    mask: "xox*-***************************"
    examples:
      match:
        - "xoxb-EXAMPLE-EXAMPLE-ExAmPlEtOkEnFoRtEsTiNg"
        - "xoxp-EXAMPLE-EXAMPLE-EXAMPLE-TeSt123ToKeN"
      nomatch:
        - "xoxb-short"
        - "xoxz-invalidprefix"
    policy:
      store_raw: false
      action_on_match: redact
      severity: critical
    metadata:
      provider: "Slack"
      type: "API Token"
      note: "FAKE examples for testing only - not real tokens"

  - id: google_api_key_01
    location: comm
    category: token
    description: Google API Key (starts with AIza)
    pattern: 'AIza[A-Za-z0-9\-_]{35}'
    priority: 10
    mask: "AIza***********************************"
    examples:
      match:
        - "AIzaSyD-9tN3R6X5Q8W7E4R2T1Y9U6I5O3P0A8S"
        - "AIzaSyABC123DEF456GHI789JKL012MNO345PQR"
      nomatch:
        - "AIza123"  # Too short
        - "aizaNotValid"  # Wrong case
    policy:
      store_raw: false
      action_on_match: redact
      severity: critical
    metadata:
      provider: "Google"
      type: "API Key"

  - id: generic_api_key_01
    location: comm
    category: token
    description: Generic API key pattern (32+ random chars without common prefixes)
    pattern: '[A-Za-z0-9_\-+/=]{32,}'
    verification: high_entropy_token
    priority: 95
    mask: "[REDACTED_API_KEY]"
    examples:
      match:
        - 'AbC123dEf456GhI789JkL012MnO345PqR678StU901VwX234YzA567'
        - 'XyZ987wVu654TsR321QpO098NmL765KjI432HgF210'
      nomatch:
        - "short"
        - 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'  # Low entropy
    policy:
      store_raw: false
      action_on_match: redact
      severity: critical
    metadata:
      type: "Generic API Key"
      note: "Catches 32+ char tokens without specific vendor prefixes"

  - id: private_key_01
    location: comm
    category: token
    description: Private key header (RSA, EC, SSH, PGP)
    pattern: '-----BEGIN (?:RSA |EC |OPENSSH )?PRIVATE KEY-----'
    priority: 5
    mask: "[REDACTED_PRIVATE_KEY]"
    examples:
      match:
        - "-----BEGIN PRIVATE KEY-----"
        - "-----BEGIN RSA PRIVATE KEY-----"
        - "-----BEGIN EC PRIVATE KEY-----"
        - "-----BEGIN OPENSSH PRIVATE KEY-----"
      nomatch:
        - "-----BEGIN PUBLIC KEY-----"
        - "-----BEGIN CERTIFICATE-----"
    policy:
      store_raw: false
      action_on_match: redact
      severity: critical
    metadata:
      type: "Private Key"
      note: "Detects private key headers - full key content should be removed"
